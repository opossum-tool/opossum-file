# SPDX-FileCopyrightText: TNG Technology Consulting GmbH <https://www.tngtech.com>
#
# SPDX-License-Identifier: Apache-2.0

# generated by datamodel-codegen:

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Extra, Field, confloat


class Metadata(BaseModel):
    class Config:
        extra = Extra.forbid

    projectId: str = Field(
        ..., description='An ID for the compliance scan, copied from the input file.'
    )
    fileCreationDate: str = Field(
        ..., description='Only for documentation, arbitrary format.'
    )
    inputFileMD5Checksum: Optional[str] = Field(
        None, description='Checksum to check if the input file has changed.'
    )


class FollowUp(Enum):
    FOLLOW_UP = 'FOLLOW_UP'


class ManualAttributions(BaseModel):
    class Config:
        extra = Extra.allow

    packageName: Optional[str] = Field(
        None, description='Name of the package (part of a package URL)'
    )
    packageVersion: Optional[str] = Field(
        None, description='Version of the package (part of a package URL)'
    )
    packageNamespace: Optional[str] = Field(
        None,
        description='Namespace of the package, e.g. Github user (part of a package URL)',
    )
    packageType: Optional[str] = Field(
        None,
        description='Protocol of the package, e.g. npm, maven (part of a package URL)',
    )
    packagePURLAppendix: Optional[str] = Field(
        None, description='Qualifiers and subpaths of a package URL'
    )
    url: Optional[str] = Field(
        None, description='URL for the source website of the package'
    )
    licenseName: Optional[str] = Field(
        None,
        description='Name of the license, ideally SPDX identifier but can also contain arbitrary names',
    )
    licenseText: Optional[str] = Field(None, description='Text of the license')
    attributionConfidence: Optional[confloat(ge=0.0, le=100.0)] = Field(
        None, description='How much the information is trusted (0: bad, 100: good)'
    )
    comment: Optional[str] = Field(
        None,
        description="Additional human-readable comments about the attribution that don't fit into other fields",
    )
    criticality: Optional[str] = Field(
        None,
        description='Indication on how critical a signal is. Possible values are "high" and "medium".',
    )
    copyright: Optional[str] = Field(None, description='Copyright of the package')
    firstParty: Optional[bool] = Field(
        None, description='Indicates that something is first-party code.'
    )
    preSelected: Optional[bool] = Field(
        None,
        description='Indicates that an attribution was pre-selected from the input file.',
    )
    excludeFromNotice: Optional[bool] = Field(
        None,
        description='Indicates that an attribution should not be included in a notice file.',
    )
    followUp: Optional[FollowUp] = Field(
        None,
        description='Indicates that an attribution is problematic and needs to be followed up.',
    )
    originId: Optional[str] = Field(
        None,
        description='Can be set to track a signal from the tooling that generated the input file. Copied from the input file',
    )
    originIds: Optional[List[str]] = Field(
        None,
        description='Like originId but considers that a signal can have more than a single origin.',
    )
    needsReview: Optional[bool] = Field(
        None,
        description='Indicates that the information in an attribution needs further review.',
    )
    preferred: Optional[bool] = Field(
        None,
        description='Indicates that the attribution has been marked as preferred by a user.',
    )
    preferredOverOriginIds: Optional[List[str]] = Field(
        None, description='OriginIds of all attributions this one is preferred over.'
    )
    wasPreferred: Optional[bool] = Field(
        None,
        description='Indicates that the attribution had previously been marked as preferred.',
    )


class OpossumOutputSchema(BaseModel):
    class Config:
        extra = Extra.allow

    metadata: Metadata
    manualAttributions: Dict[str, ManualAttributions]
    resourcesToAttributions: Dict[str, List[str]] = Field(
        ...,
        description='Map from a path in the resource tree (e.g. `/folder/subfolder/`, `/folder/file`, note the mandatory slashes at the beginning and end) to a list of attribution IDs.',
    )
    resolvedExternalAttributions: Optional[List[str]] = Field(
        None, description='List of attribution IDs for input signals that are resolved.'
    )

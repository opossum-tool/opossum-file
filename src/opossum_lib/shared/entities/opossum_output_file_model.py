# SPDX-FileCopyrightText: TNG Technology Consulting GmbH <https://www.tngtech.com>
#
# SPDX-License-Identifier: Apache-2.0

# originally generated by datamodel-codegen:

from __future__ import annotations

from enum import Enum
from typing import Annotated

from pydantic import ConfigDict, Field

from opossum_lib.shared.entities.camel_base_model import CamelBaseModel


class Metadata(CamelBaseModel):
    project_id: str = Field(
        ..., description="An ID for the compliance scan, copied from the input file."
    )
    file_creation_date: str = Field(
        ..., description="Only for documentation, arbitrary format."
    )
    input_file_md5_checksum: str | None = Field(
        None, description="Checksum to check if the input file has changed."
    )


class FollowUp(Enum):
    FOLLOW_UP = "FOLLOW_UP"


class ManualAttributions(CamelBaseModel):
    model_config = ConfigDict(extra="allow")

    package_name: str | None = Field(
        None, description="Name of the package (part of a package URL)"
    )
    package_version: str | None = Field(
        None, description="Version of the package (part of a package URL)"
    )
    package_namespace: str | None = Field(
        None,
        description="Namespace of the package, e.g. Github user "
        "(part of a package URL)",
    )
    package_type: str | None = Field(
        None,
        description="Protocol of the package, e.g. npm, maven (part of a package URL)",
    )
    package_p_u_r_l_appendix: str | None = Field(
        None, description="Qualifiers and subpaths of a package URL"
    )
    url: str | None = Field(
        None, description="URL for the source website of the package"
    )
    license_name: str | None = Field(
        None,
        description="Name of the license, ideally SPDX identifier but"
        " can also contain arbitrary names",
    )
    license_text: str | None = Field(None, description="Text of the license")
    attribution_confidence: (
        Annotated[float, Field(strict=True, ge=0, le=100)] | None
    ) = Field(
        None, description="How much the information is trusted (0: bad, 100: good)"
    )
    comment: str | None = Field(
        None,
        description="Additional human-readable comments about"
        " the attribution that don't fit into other fields",
    )
    criticality: str | None = Field(
        None,
        description="Indication on how critical a signal is."
        ' Possible values are "high" and "medium".',
    )
    copyright: str | None = Field(None, description="Copyright of the package")
    first_party: bool | None = Field(
        None, description="Indicates that something is first-party code."
    )
    pre_selected: bool | None = Field(
        None,
        description="Indicates that an attribution was"
        " pre-selected from the input file.",
    )
    exclude_from_notice: bool | None = Field(
        None,
        description="Indicates that an attribution should"
        " not be included in a notice file.",
    )
    follow_up: FollowUp | None = Field(
        None,
        description="Indicates that an attribution is"
        " problematic and needs to be followed up.",
    )
    origin_id: str | None = Field(
        None,
        description="Can be set to track a signal from the tooling"
        " that generated the input file. Copied from the input file",
    )
    origin_ids: list[str] | None = Field(
        None,
        description="Like originId but considers that a"
        " signal can have more than a single origin.",
    )
    needs_review: bool | None = Field(
        None,
        description="Indicates that the information in an"
        " attribution needs further review.",
    )
    preferred: bool | None = Field(
        None,
        description="Indicates that the attribution has been "
        "marked as preferred by a user.",
    )
    preferred_over_origin_ids: list[str] | None = Field(
        None, description="OriginIds of all attributions this one is preferred over."
    )
    was_preferred: bool | None = Field(
        None,
        description="Indicates that the attribution had previously"
        " been marked as preferred.",
    )


class OpossumOutputFileModel(CamelBaseModel):
    model_config = ConfigDict(extra="allow")

    metadata: Metadata
    manual_attributions: dict[str, ManualAttributions]
    resources_to_attributions: dict[str, list[str]] = Field(
        ...,
        description="Map from a path in the resource tree "
        "(e.g. `/folder/subfolder/`, `/folder/file`, "
        "note the mandatory slashes at the beginning and end) "
        "to a list of attribution IDs.",
    )
    resolved_external_attributions: list[str] | None = Field(
        None, description="List of attribution IDs for input signals that are resolved."
    )
